// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  firebaseUid String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime @default(now())

  roles             UserRole[]
  pharmacistProfile PharmacistProfile?
  shiftAssignments  ShiftAssignment[]
  notifications     Notification[]
  files             File[]
}

model Company {
  id         String   @id @default(uuid())
  approved   Boolean  @default(true)
  name       String   @unique
  email      String?
  phone      String?
  address    String?
  city       String?
  province   String?
  postalCode String?
  createdBy  String
  createdAt  DateTime @default(now())

  users     UserRole[]
  locations Location[]
  shifts    Shift[]
}

model UserRole {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  createdAt DateTime @default(now())
}

enum Role {
  admin
  pharmacy_manager
  relief_pharmacist
}

model PharmacistProfile {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
  licenseNumber   String?
  address         String?
  city            String?
  province        String?
  postalCode      String?
  email           String?
  bio             String?
  experienceYears Int?
  approved        Boolean
  createdAt       DateTime @default(now())
}

model Location {
  id         String  @id @default(uuid())
  name       String  @unique
  email      String?
  phone      String?
  address    String?
  city       String?
  province   String?
  postalCode String?
  company    Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String

  shifts Shift[]
}

model Shift {
  id          String      @id @default(uuid())
  company     Company     @relation(fields: [companyId], references: [id])
  companyId   String
  location    Location?   @relation(fields: [locationId], references: [id])
  locationId  String?
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  payRate     Float
  status      ShiftStatus @default(open)
  createdAt   DateTime    @default(now())

  assignments ShiftAssignment[]
}

enum ShiftStatus {
  open
  taken
  cancelled
  completed
}

model ShiftAssignment {
  id           String   @id @default(uuid())
  shift        Shift    @relation(fields: [shiftId], references: [id])
  shiftId      String
  pharmacist   User     @relation(fields: [pharmacistId], references: [id])
  pharmacistId String
  assignedAt   DateTime @default(now())
  confirmed    Boolean  @default(false)
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  type      NotificationType @default(shift)
  actionUrl String?
  seen      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  shift
  system
  payment
  reminder
}

model File {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  fileName   String
  fileUrl    String
  uploadedAt DateTime @default(now())
}