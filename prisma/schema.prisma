generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  firebaseUid String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime @default(now())

  roles             UserRole[]
  pharmacistProfile PharmacistProfile?
  notifications     Notification[]
  files             File[]
}

model Company {
  id         String   @id @default(uuid())
  approved   Boolean  @default(true)
  name       String   @unique
  email      String?
  phone      String?
  address    String?
  city       String?
  province   String?
  postalCode String?
  createdBy  String
  createdAt  DateTime @default(now())

  managers  UserRole[]
  locations Location[]
  shifts    Shift[]

  @@index([createdBy])
}

model UserRole {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId String?
  location  Location? @relation(fields: [locationId], references: [id])
  locationId String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([companyId])
  @@index([locationId])
}

enum Role {
  admin
  pharmacy_manager
  relief_pharmacist
  location_manager
}

model PharmacistProfile {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
  licenseNumber   String?
  address         String?
  city            String?
  province        String?
  postalCode      String?
  email           String?
  bio             String?
  experienceYears Int?
  approved        Boolean
  createdAt       DateTime @default(now())

  shifts          Shift[]
}

model Location {
  id         String  @id @default(uuid())
  name       String  @unique
  email      String?
  phone      String?
  address    String?
  city       String?
  province   String?
  postalCode String?
  company    Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String

  shifts     Shift[]
  managers   UserRole[]

  @@index([companyId])
}

model Shift {
  id           String            @id @default(uuid())
  company      Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  location     Location?         @relation(fields: [locationId], references: [id], onDelete: SetNull)
  locationId   String?
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  payRate      Float
  status       ShiftStatus       @default(open)
  createdAt    DateTime          @default(now())
  pharmacist   PharmacistProfile? @relation(fields: [pharmacistId], references: [id], onDelete: SetNull)
  pharmacistId String?

  @@index([companyId])
  @@index([locationId])
  @@index([pharmacistId])
  @@unique([locationId, startTime]) // prevent double-booking in same location
}

enum ShiftStatus {
  open
  taken
  cancelled
  completed
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String
  message   String
  type      NotificationType @default(shift)
  actionUrl String?
  seen      Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId])
}

enum NotificationType {
  shift
  system
  payment
  reminder
}

model File {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  fileName   String
  fileUrl    String
  uploadedAt DateTime @default(now())

  @@index([userId])
}

