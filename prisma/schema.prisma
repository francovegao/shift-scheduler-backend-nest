generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  firebaseUid String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  phone       String?
  createdAt   DateTime @default(now())

  role        Role
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId   String?
  location    Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  locationId  String?

  pharmacistProfile PharmacistProfile?
  notifications     Notification[]
  files             File[]

  @@index([companyId])
  @@index([locationId])
}

model Company {
  id          String   @id @default(uuid())
  approved    Boolean  @default(true)
  name        String   @unique
  legalName   String?
  GSTNumber   String?
  email       String?
  phone       String?
  address     String?
  city        String?
  province    String?
  postalCode  String?
  createdAt   DateTime @default(now())

  managers  User[]
  locations Location[]
  shifts    Shift[]
  files     File[]

  allowedPharmacists PharmacistProfile[] @relation("PharmacistAllowedCompanies")
}

enum Role {
  admin
  pharmacy_manager
  relief_pharmacist
  location_manager
}

model PharmacistProfile {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @unique
  licenseNumber     String?
  address           String?
  city              String?
  province          String?
  postalCode        String?
  email             String?
  bio               String?
  experienceYears   Int?
  approved          Boolean
  canViewAllCompanies Boolean @default(false)
  createdAt         DateTime @default(now())

  shifts            Shift[]
  allowedCompanies  Company[] @relation("PharmacistAllowedCompanies")
}

model Location {
  id          String  @id @default(uuid())
  name        String  @unique
  legalName   String?
  GSTNumber   String?
  email       String?
  phone       String?
  address     String?
  city        String?
  province    String?
  postalCode  String?
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  
  shifts      Shift[]
  managers    User[]

  @@index([companyId])
}

model Shift {
  id           String            @id @default(uuid())
  company      Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  location     Location?         @relation(fields: [locationId], references: [id], onDelete: SetNull)
  locationId   String?
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  payRate      Float
  status       ShiftStatus       @default(open)
  createdAt    DateTime          @default(now())
  pharmacist   PharmacistProfile? @relation(fields: [pharmacistId], references: [id], onDelete: SetNull)
  pharmacistId String?

  @@index([companyId])
  @@index([locationId])
  @@index([pharmacistId])
}

enum ShiftStatus {
  open
  taken
  cancelled
  completed
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String
  message   String
  type      NotificationType @default(shift)
  actionUrl String?
  seen      Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId])
}

enum NotificationType {
  shift
  system
  payment
  reminder
}

model File {
  id         String   @id @default(uuid())
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  company    Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String?
  fileName   String
  fileUrl    String
  mimeType   String?
  size       Int?
  type       FileType?
  uploadedAt DateTime @default(now())
}

enum FileType {
  resume
  logo
  document
}

